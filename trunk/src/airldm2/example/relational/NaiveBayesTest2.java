package airldm2.example.relational;

import java.io.File;

import airldm2.classifiers.bayes.NaiveBayesClassifier;
import airldm2.core.LDInstance;
import airldm2.core.LDInstances;
import airldm2.core.LDTestInstances;
import airldm2.core.datatypes.relational.ColumnDescriptor;
import airldm2.core.datatypes.relational.SingleRelationDataDescriptor;
import airldm2.util.SimpleArffFileReader;

/**
 * 
 * TODO Write class description here.
 * 
 * @author neeraj (neeraj@cs.iastate.edu)
 * @since Feb 11, 2008
 * @version $Date: 2008/04/03 03:43:57 $
 */
public class NaiveBayesTest2 {

   public void test(LDInstances instances, File arffTestFile) {

   }

   public static void main(String[] args) throws Exception {

      boolean debug = false;
      String base = System.getProperty("user.dir");
      String trainFileName = base + "/sample/autoGenerated/LargeDataset150000.arff";
      String testFileName = base + "/sample/autoGenerated/LargeDataset150000.arff";
      
      //String trainFileName = base + "/sample/HouseVotesTrain.arff";
      //String testFileName = base + "/sample/HouseVotesTest.arff";
      // String testFileName = base + "/sample/test.arff";

      // for confusion matrix
      int dd = 0;
      int dr = 0;
      int rd = 0;
      int rr = 0;

      SimpleArffFileReader readTrain = new SimpleArffFileReader(trainFileName);
      SimpleArffFileReader readTest = new SimpleArffFileReader(testFileName);

      long startReadingTime = System.currentTimeMillis();
      LDInstances instances = readTrain.getLDInstances(false);
      LDTestInstances testInst = readTest.getTestInstances();
      long endReadingTime = System.currentTimeMillis();
      long readingTime = endReadingTime - startReadingTime;
      
      SingleRelationDataDescriptor desc = (SingleRelationDataDescriptor) instances
            .getDesc();
      if (debug) {
         printTestInstances(testInst);
      }
      NaiveBayesClassifier naiveBayes = new NaiveBayesClassifier();
      
      long startBuildIngClassifierTime = System.currentTimeMillis();
      naiveBayes.buildClassifier(instances);
      long endBuildingClassifierTime = System.currentTimeMillis();
      long buildingTime = endBuildingClassifierTime
      - startBuildIngClassifierTime;
      
      for (int i = 0; i < testInst.getNumberInstances(); i++) {
         LDInstance currInstance = testInst.getLDInstance(i);
         double index = naiveBayes.classifyInstance(currInstance);

         int resIndex = new Double(index).intValue();

         ColumnDescriptor labelAttribute = desc.getTableDesc().getColumns()
               .lastElement();

         String predictedClass = labelAttribute.getPossibleValues().get(
               resIndex);
         String actualClass = currInstance.getClassLabel();
         System.out.println("predicted class=" + predictedClass
               + " Actual Class=" + actualClass);
         if (actualClass.trim().equals("0")) {
            if (predictedClass.equals("0")) {
               dd += 1;
            } else {
               dr += 1;
            }

         } else if (actualClass.trim().equals("1")) {
            if (predictedClass.equals("0")) {
               rd += 1;
            } else {
               rr += 1;
            }
         }

      }
      System.out.println("CONFUSION MATRIX");
      System.out.println();

      System.out.println("\t democrat \t republican");
      System.out.println("\t -------------------------");
      System.out.println("democrat \t " + dd + "\t" + dr);
      System.out.println("republican \t " + rd + "\t" + rr);
      
      System.out.println("readTime = " + readingTime);
      System.out.println("building Time= " + buildingTime);
      System.out.println();

   }

   private static void printTestInstances(LDTestInstances testInst)
         throws Exception {
      for (int i = 0; i < testInst.getNumberInstances(); i++) {
         LDInstance currInstance = testInst.getLDInstance(i);
         System.out.println("(" + i + "):"
               + currInstance.getStringRepresentation());

      }
   }
}
