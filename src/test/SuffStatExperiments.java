package test;

import java.io.FileWriter;
import java.io.PrintWriter;

import airldm2.classifiers.bayes.NaiveBayesClassifier;
import airldm2.classifiers.trees.*;
import airldm2.core.LDInstances;
import airldm2.util.SimpleArffFileReader;
import airldm2.classifiers.Classifier;

public class SuffStatExperiments {

   public static void main(String[] args) throws Exception {
      String base = System.getProperty("user.dir");
      String path = base + "/sample/autoGenerated/";
      String sampleName = "sampleA";
      // sampleA200.arff will be composed to a file name as
      // base+"sample/autoGenerated/"+sampleName+add+".arff"
      int add = 10000;
      String fileNamePrefix = path + sampleName, trainFileName;
      Classifier classifier = null;
      if (args.length < 1) {
         System.err.println("Incorrect input: usage <1 or 2>");
         System.exit(0);
      }

      String classifierName = "";
      if (args[0].equals("1")) {
         classifier = new NaiveBayesClassifier();
         classifierName = "NaiveBayes";
      } else if (args[0].equals("2")){
         classifier = new Id3Classifier();
         classifierName = "ID3";
      }
      else {
         classifier = new Id3SimpleClassifier();
         classifierName = "ID3Simple";
      }

      int numberOfExperiments = 10;
      String resultFilePrefix = path + classifierName + sampleName;
      PrintWriter result = new PrintWriter(new FileWriter(resultFilePrefix
            + "Result.txt"));
      result
            .println("Following summarizes the classifier building time for "
                  + classifierName + " for " + numberOfExperiments
                  + " experiment[s]");

      for (int i =0; i < numberOfExperiments; i++) {
         System.out.println("Experiment Number " + (i + 1));
         trainFileName = fileNamePrefix + Integer.toString((add) * (i + 1))
               + ".arff";
         SimpleArffFileReader readTrain = new SimpleArffFileReader(
               trainFileName, true);

         long startReadingTime = System.currentTimeMillis();
         LDInstances instances = readTrain.getLDInstances(false);
         long endReadingTime = System.currentTimeMillis();

         long startBuildIngClassifierTime = System.currentTimeMillis();
         // NaiveBayesClassifier naiveBayes = new NaiveBayesClassifier();
         // naiveBayes.buildClassifier(instances);
         classifier.buildClassifier(instances);
         long endBuildingClassifierTime = System.currentTimeMillis();

         int numberOfInstances = instances.getDataSource().getNumberInstances();
         System.out
               .println("*************************************************");
         long readingTime = endReadingTime - startReadingTime;
         long buildingTime = endBuildingClassifierTime
               - startBuildIngClassifierTime;
         System.out.println("Instances = " + numberOfInstances);
         System.out.println("readTime = " + readingTime);
         System.out.println(classifierName + " building Time= " + buildingTime);
         System.out.println();
         result.println("Experiment number: " + (i + 1));
         result.println("Instances = " + numberOfInstances);
         result.println((classifierName + " building Time= " + buildingTime));
         result.println("\n");
         result.flush();
      }

      System.out.println(".............DONE..........");
      result.close();

   }
}
